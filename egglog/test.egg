(include "elephant.egg")

;; Here are some small examples to demonstrate how we apply rewrites to netlists
;; to decompile higher-level abstractions.


;; For a small example, consider some combinational logic that represents a mux.
;; First, declare intermediate variables for each of the wires, a, b, and c.
;; For the Wire declaration, `1` is the bitwidth of the wire.
(let a (Wire "a" 1))
(let b (Wire "b" 1))
(let s (Wire "s" 1))

;; Next, use these wires to build some logic.
(let circuit1
 (Or
  (And a (Not s))
  (And b s)))
;; In infix notation, this is just `(a & ~s) | (b & s)`.

;; Next, run the rewrite rules.
;; As you will find in `elephant.egg`, there are two sets of rules.
;; The `typing` rule set propagates type information throughout the circuit.
;; Most of this just tracks the bitwidth of operations.
;; The `decomp` rule set performs decompilation
;; (sometimes using the typing information).
(run-schedule (saturate typing) (saturate decomp))
;; After running the rewrites, we "extract" an optimal expression for circuit1.
(query-extract circuit1)

;; The program should output something like this:
;; [INFO ] extracted with cost 11: (Mux (Wire "s" 1) (Concat (Wire "a" 1) (Wire "b" 1)))

;; Let's try a slightly bigger example.
;; This is the logic for a 4-to-1 mux with 2-bit selector.
;; These are the data wires.
(let x0 (Wire "x0" 1))
(let x1 (Wire "x1" 1))
(let x2 (Wire "x2" 1))
(let x3 (Wire "x3" 1))
;; These are the select wires.
(let a0 (Wire "a0" 1))
(let a1 (Wire "a1" 1))

(let circuit2
 (Or
  (And
   (Or
    (And x0 (Not a0))
	(And x1 a0))
   (Not a1))
  (And
   (Or
    (And x2 (Not a0))
	(And x3 a0))
   a1)))

(run-schedule (repeat 5 (saturate typing) (saturate decomp)))
(query-extract circuit2)
;; Running the rewrites we'll get the following output:
;; [INFO ] extracted with cost 23: (Mux (Concat (Wire "a0" 1) (Wire "a1" 1)) (Concat (Concat (Wire "x0" 1) (Wire "x1" 1)) (Concat (Wire "x2" 1) (Wire "x3" 1))))

;; Now it produces a Mux with a select bit that consists of two concatenated wires,
;; and selects among the 4 wires x0, x1, x2, x3.

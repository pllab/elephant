(include "./elephant.egg")

(let memory (Memory (vec-of (ReadPort (Wire "en0" 1) (Wire "addr0" 2) (Wire "data0" 8)) (ReadPort (Wire "en1" 1) (Wire "addr1" 2) (Wire "data1" 8))) (vec-of (WritePort (Wire "en_w" 1) (Wire "addr_w" 2) (Wire "data_w" 8))) (set-of (Sync)) 2 8)) ; memory

(run-schedule (saturate typing) (saturate readport) (saturate readaddress) (saturate typing) (saturate decomp))
(query-extract memory) ; expected: (Bundle (set-of (Guard (Wire "en1" 1) (Update (Wire "data1" 8) (Bundle (set-of (Mux (Wire "addr1" 2) (MapSelect 7 (vec-of (Reg "x0" 8) (Reg "x1" 8) (Reg "x2" 8) (Reg "x3" 8)))) (Mux (Wire "addr1" 2) (MapSelect 6 (vec-of (Reg "x0" 8) (Reg "x1" 8) (Reg "x2" 8) (Reg "x3" 8)))) (Mux (Wire "addr1" 2) (MapSelect 5 (vec-of (Reg "x0" 8) (Reg "x1" 8) (Reg "x2" 8) (Reg "x3" 8)))) (Mux (Wire "addr1" 2) (MapSelect 4 (vec-of (Reg "x0" 8) (Reg "x1" 8) (Reg "x2" 8) (Reg "x3" 8)))) (Mux (Wire "addr1" 2) (MapSelect 3 (vec-of (Reg "x0" 8) (Reg "x1" 8) (Reg "x2" 8) (Reg "x3" 8)))) (Mux (Wire "addr1" 2) (MapSelect 2 (vec-of (Reg "x0" 8) (Reg "x1" 8) (Reg "x2" 8) (Reg "x3" 8)))) (Mux (Wire "addr1" 2) (MapSelect 1 (vec-of (Reg "x0" 8) (Reg "x1" 8) (Reg "x2" 8) (Reg "x3" 8)))) (Mux (Wire "addr1" 2) (MapSelect 0 (vec-of (Reg "x0" 8) (Reg "x1" 8) (Reg "x2" 8) (Reg "x3" 8)))))))) (Bundle (set-of (Memory (vec-empty) (vec-empty) (set-of (Sync)) 2 8) (Guard (Wire "en_w" 1) (Update (MemAccess (Wire "addr_w" 2) (Memory (vec-empty) (vec-empty) (set-of (Sync)) 2 8)) (Wire "data_w" 8))))) (Guard (Wire "en0" 1) (Update (Wire "data0" 8) (Bundle (set-of (Mux (Wire "addr0" 2) (MapSelect 7 (vec-of (Reg "x0" 8) (Reg "x1" 8) (Reg "x2" 8) (Reg "x3" 8)))) (Mux (Wire "addr0" 2) (MapSelect 6 (vec-of (Reg "x0" 8) (Reg "x1" 8) (Reg "x2" 8) (Reg "x3" 8)))) (Mux (Wire "addr0" 2) (MapSelect 5 (vec-of (Reg "x0" 8) (Reg "x1" 8) (Reg "x2" 8) (Reg "x3" 8)))) (Mux (Wire "addr0" 2) (MapSelect 4 (vec-of (Reg "x0" 8) (Reg "x1" 8) (Reg "x2" 8) (Reg "x3" 8)))) (Mux (Wire "addr0" 2) (MapSelect 3 (vec-of (Reg "x0" 8) (Reg "x1" 8) (Reg "x2" 8) (Reg "x3" 8)))) (Mux (Wire "addr0" 2) (MapSelect 2 (vec-of (Reg "x0" 8) (Reg "x1" 8) (Reg "x2" 8) (Reg "x3" 8)))) (Mux (Wire "addr0" 2) (MapSelect 1 (vec-of (Reg "x0" 8) (Reg "x1" 8) (Reg "x2" 8) (Reg "x3" 8)))) (Mux (Wire "addr0" 2) (MapSelect 0 (vec-of (Reg "x0" 8) (Reg "x1" 8) (Reg "x2" 8) (Reg "x3" 8))))))))))

(run-schedule (saturate typing) (saturate readport) (saturate readaddress) (saturate typing) (saturate writeport) (saturate decomp))
(query-extract memory) ; expected: (Bundle (set-of (Guard (Wire "en1" 1) (Update (Wire "data1" 8) (Bundle (set-of (Mux (Wire "addr1" 2) (MapSelect 7 (vec-of (Reg "x0" 8) (Reg "x1" 8) (Reg "x2" 8) (Reg "x3" 8)))) (Mux (Wire "addr1" 2) (MapSelect 6 (vec-of (Reg "x0" 8) (Reg "x1" 8) (Reg "x2" 8) (Reg "x3" 8)))) (Mux (Wire "addr1" 2) (MapSelect 5 (vec-of (Reg "x0" 8) (Reg "x1" 8) (Reg "x2" 8) (Reg "x3" 8)))) (Mux (Wire "addr1" 2) (MapSelect 4 (vec-of (Reg "x0" 8) (Reg "x1" 8) (Reg "x2" 8) (Reg "x3" 8)))) (Mux (Wire "addr1" 2) (MapSelect 3 (vec-of (Reg "x0" 8) (Reg "x1" 8) (Reg "x2" 8) (Reg "x3" 8)))) (Mux (Wire "addr1" 2) (MapSelect 2 (vec-of (Reg "x0" 8) (Reg "x1" 8) (Reg "x2" 8) (Reg "x3" 8)))) (Mux (Wire "addr1" 2) (MapSelect 1 (vec-of (Reg "x0" 8) (Reg "x1" 8) (Reg "x2" 8) (Reg "x3" 8)))) (Mux (Wire "addr1" 2) (MapSelect 0 (vec-of (Reg "x0" 8) (Reg "x1" 8) (Reg "x2" 8) (Reg "x3" 8)))))))) (Memory (vec-empty) (vec-of (WritePort (Wire "en_w" 1) (Wire "addr_w" 2) (Wire "data_w" 8))) (set-of (Sync)) 2 8) (Guard (Wire "en0" 1) (Update (Wire "data0" 8) (Bundle (set-of (Mux (Wire "addr0" 2) (MapSelect 7 (vec-of (Reg "x0" 8) (Reg "x1" 8) (Reg "x2" 8) (Reg "x3" 8)))) (Mux (Wire "addr0" 2) (MapSelect 6 (vec-of (Reg "x0" 8) (Reg "x1" 8) (Reg "x2" 8) (Reg "x3" 8)))) (Mux (Wire "addr0" 2) (MapSelect 5 (vec-of (Reg "x0" 8) (Reg "x1" 8) (Reg "x2" 8) (Reg "x3" 8)))) (Mux (Wire "addr0" 2) (MapSelect 4 (vec-of (Reg "x0" 8) (Reg "x1" 8) (Reg "x2" 8) (Reg "x3" 8)))) (Mux (Wire "addr0" 2) (MapSelect 3 (vec-of (Reg "x0" 8) (Reg "x1" 8) (Reg "x2" 8) (Reg "x3" 8)))) (Mux (Wire "addr0" 2) (MapSelect 2 (vec-of (Reg "x0" 8) (Reg "x1" 8) (Reg "x2" 8) (Reg "x3" 8)))) (Mux (Wire "addr0" 2) (MapSelect 0 (vec-of (Reg "x0" 8) (Reg "x1" 8) (Reg "x2" 8) (Reg "x3" 8)))) (Mux (Wire "addr0" 2) (MapSelect 1 (vec-of (Reg "x0" 8) (Reg "x1" 8) (Reg "x2" 8) (Reg "x3" 8))))))))))
